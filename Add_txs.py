"""
Synthetic Transmitter Addition Script

This script is used to add synthetic transmitters to videos stored in numbered directories. The videos 
are stored as sequences of images, and the transmitters are added according to a 2D Gaussian distribution, 
which is the common behavior of light sources like LEDs. Additionally, the positions of the transmitters are 
stored in the YoLo format with the aim of using the dataset generated by this algorithm. The user is prompted 
to select both transmitter and non-transmitter pixels, and this information is stored for later evaluation 
of the parameters associated with these pixels in order to determine which ones better distinguish both classes.

The script aims to facilitate the creation of a OCC dataset for tasks like object detection and tracking.
"""

import cv2
import numpy as np
import pandas as pd
import random
from matplotlib import pyplot as plt


def generate_frame_bits():
    """
    Generates a data frame with a randomized payload.

    The data frame format consists of:
    - 5 header bits set to 1
    - 1 bit set to 0 as a guardband
    - 4 payload bits
    - 1 bit set to 0 as a guardband
    - 4 payload bits

    Args:
        None

    Returns:
        np.array: A NumPy array representing a data frame with a shape of (1x15).
    """

     

def create_mask(radius, std):
    """
    Creates a 2D Gaussian mask.

    Generates a 2D Gaussian mask using the specified radius and standard deviation.

    Args:
        radius (int): The radius of the mask, determining its size.
        std (float): The standard deviation, controlling the shape of the Gaussian distribution.

    Returns:
        np.array: A NumPy array representing the 2D Gaussian mask(radiusxradius).
    """


def modulate_image(frame, center, radius, bit, intensity_fix):
   """
    Modulates a luminous region in a video frame according to the bit.

    This function modulates a bit state into a specified luminous region within a video frame.
    
    Args:
        frame (np.array): The video's frame to be modified.
        center (tuple): A tuple containing the coordinates (x, y) of the region's center.
        radius (int): The radius of the luminous region.
        bit (int): The bit state to be modulated (0 or 1).
        intensity_fix (float): A factor for adjusting intensity.

    Returns:
        None
    """
   
def create_YoLo_file(transmitters, radius):
    """
    Get and store transmitters boxes in YoLo format.
    
    Args:
        transmitters(np.array): List of (x,y) coordinates of selected transmitters.
        radius(np.array): Wrotten radius for each transmitter.

    Returns:
        None
    """

def store_pixels(transmitters, non_transmitters):
    """
    Store pixels positions of selected transmitters and non transmitters
    
    Args:
        transmitters (np.array): List of (x,y) coordinates of selected transmitters.
        non_transmitters (np.array): List of (x,y) coordinates of selected non transmitters.

    Returns:
        None
    """


def main():
    """
    Access each of the videos in each directory and extract its images and 
    main parameters (FPS, duration, number of images).

    Displays the first image of each video and asks for the position of 
    transmitters and non-transmitters, size of each light region.

    Generates and store random data frames for each transmitter and modifies  
    the images to represent those data frames in the specified positions and sizes.
    """

if __name__ == "__main__":
    main()
